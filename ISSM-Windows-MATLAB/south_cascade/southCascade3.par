%% South Cascade Glacier Parameterization File

disp('Parameterizing model...');

%% Physical Constants
md.constants.g = 9.81; % Gravity [m/s²]
md.constants.yts = 365.25 * 24 * 3600; % Seconds per year
md.materials.rho_ice = 917; % Ice density [kg/m³]
md.materials.rho_water = 1028; % Water density [kg/m³]

%% Ice Flow Parameters
md.materials.rheology_B = 1.6e8;% Flow law parameter
md.materials.rheology_n = 3; % Glen's flow law exponent

disp('Applying Basal Friction...');
md.friction.coefficient = max(30 * ones(md.mesh.numberofvertices,1), 1); % Ensure no zero friction
md.friction.p = 0.6 * ones(md.mesh.numberofvertices,1);
md.friction.q = 1.5 * ones(md.mesh.numberofvertices,1);

%% Boundary Conditions
md.stressbalance.spcvx = NaN(md.mesh.numberofvertices,1); % Free-slip in x
md.stressbalance.spcvy = NaN(md.mesh.numberofvertices,1); % Free-slip in y
md.stressbalance.spcvz = NaN(md.mesh.numberofvertices,1); % Free-slip in z

% Fixed velocity at ice divides (modify if necessary)
%divide_nodes = find(md.mesh.x < -122.05e3 & md.mesh.y > 48.25e3);
%md.stressbalance.spcvx(divide_nodes) = 0;
%md.stressbalance.spcvy(divide_nodes) = 0;
%md.stressbalance.spcvz(divide_nodes) = 0;

%% Temperature (Assuming isothermal ice)
md.thermal.spctemperature = -5 * ones(md.mesh.numberofvertices,1); % -5°C ice temperature


x = load('Data/x2.mat').x;  % Ensure this file exists
y = load('Data/y2.mat').y;
%% Surface Mass Balance (SMB)
%% Step 4: Apply Surface Mass Balance (SMB)
%% Step 4: Apply Surface Mass Balance (SMB)
%% Step 4: Apply Surface Mass Balance (SMB)
%% Step 4: Apply Surface Mass Balance (SMB)
%% Step 4: Apply Surface Mass Balance (SMB)
disp('Applying Uniform SMB...');

% Load SMB data (41 years x 1)
smb_data = load('Data/Processed_SMB_Data_for_ISSM.csv'); 
smb_data = smb_data(:);  

% Compute the mean SMB over time (one value per vertex)
mean_smb = mean(smb_data);

% Assign a single SMB value uniformly across all mesh vertices (3952 x 1)
md.smb.mass_balance = mean_smb * ones(md.mesh.numberofvertices, 1);

% Print shape for verification
disp(['Final Shape of md.smb.mass_balance: ', num2str(size(md.smb.mass_balance,1)), ' x ', num2str(size(md.smb.mass_balance,2))]);



% Print the final shape
disp(['Shape of md.smb.mass_balance: ', num2str(size(md.smb.mass_balance,1)), ' x ', num2str(size(md.smb.mass_balance,2))]);
disp(num2str(size(md.smb.mass_balance)))
disp(num2str(size(md.mesh.numberofvertices)))
%md.smb.mass_balance = InterpFromGridToMesh(x, y, smb_data, md.mesh.x, md.mesh.y, 2000);

md.basalforcings.groundedice_melting_rate = zeros(md.mesh.numberofvertices,1);
md.basalforcings.floatingice_melting_rate = zeros(md.mesh.numberofvertices,1);

md.friction.p = 0.6 * ones(md.mesh.numberofelements,1);
md.friction.q = 1.5 * ones(md.mesh.numberofelements,1);
md.friction.coefficient = 30 * ones(md.mesh.numberofelements,1); % Example friction coefficient

%% Initial Conditions
disp('Setting up initial conditions...');
md.initialization.vx = zeros(md.mesh.numberofvertices,1); % Initial x-velocity
md.initialization.vy = zeros(md.mesh.numberofvertices,1); % Initial y-velocity
md.initialization.vz = zeros(md.mesh.numberofvertices,1); % Initial z-velocity
md.initialization.temperature = -5 * ones(md.mesh.numberofvertices,1); % Initial temperature

%% Transient Model Settings
disp('Configuring transient model...');
md.transient.isstressbalance = 1;
md.transient.ismasstransport = 1;
md.transient.isthermal = 0;
md.transient.ismovingfront = 1;

md.flowequation.borderSSA = zeros(md.mesh.numberofvertices,1); % SSA model
md.flowequation.borderHO = zeros(md.mesh.numberofvertices,1);
md.flowequation.borderFS = zeros(md.mesh.numberofvertices,1);
md.flowequation.vertex_equation = ones(md.mesh.numberofvertices,1);
md.flowequation.element_equation = ones(md.mesh.numberofelements,1);

disp('Applying Stress Balance Constraints...');
md.stressbalance.referential = NaN(md.mesh.numberofvertices, 6);
md.stressbalance.loadingforce = zeros(md.mesh.numberofvertices, 3); % No external force applied
disp('Fixing Calving and Frontal Forcing...');
md.calving.calvingrate = zeros(md.mesh.numberofvertices,1);
md.frontalforcings.meltingrate = zeros(md.mesh.numberofvertices,1);
disp('Applying Ice Thickness Constraints...');
md.masstransport.spcthickness = NaN(md.mesh.numberofvertices,1);
disp('Fixing Level Set...');
md.levelset.spclevelset = NaN(md.mesh.numberofvertices, 1); % Ensuring correct dimensions


disp('Parameterization complete.');
